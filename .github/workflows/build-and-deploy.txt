name: Build and Deploy CRM Microservices

on:
  push:
    branches: [ main, develop, feature/* ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      registry:
        description: 'Docker Registry (e.g., docker.io/username)'
        required: true
        default: 'docker.io/mukeshkr1234'
      image_tag:
        description: 'Image Tag'
        required: true
        default: 'latest'
      push_images:
        description: 'Push images to registry'
        required: false
        default: 'false'
        type: boolean
      run_migrations:
        description: 'Run database migrations'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ${{ github.event.inputs.registry || 'docker.io/mukeshkr1234' }}
  IMAGE_TAG: ${{ github.event.inputs.image_tag || 'latest' }}
  PUSH_IMAGES: ${{ github.event.inputs.push_images || 'false' }}
  RUN_MIGRATIONS: ${{ github.event.inputs.run_migrations || 'false' }}
  
  # Service names
  SERVICE_REGISTRY: service-registry
  AUTH_SERVICE: auth-service
  USERS_SERVICE: users-service
  TENANT_SERVICE: tenant-service
  API_GATEWAY: api-gateway
  
  # Database services (services with Flyway migrations)
  DB_SERVICES: auth-service,tenant-service,users-service

jobs:
  # Code quality and security checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'
    
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run Maven validate
      run: |
        echo "üîç Validating Maven projects..."
        for service in service-registry auth-service tenant-service users-service api-gateway; do
          echo "Validating $service..."
          cd $service
          mvn validate -q
          cd ..
        done
    
    - name: Check code formatting
      run: |
        echo "üé® Checking code formatting..."
        # Add your code formatting checks here
        echo "Code formatting check completed"
    
    - name: Run security scan with CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: java
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Database migration validation
  validate-migrations:
    name: Validate Database Migrations
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'
    
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Setup test databases
      run: |
        echo "üóÑÔ∏è Setting up test databases..."
        export PGPASSWORD=postgres
        
        # Create test databases and users
        psql -h localhost -U postgres -c "CREATE DATABASE auth_service_test_db;"
        psql -h localhost -U postgres -c "CREATE DATABASE tenant_service_test_db;"
        psql -h localhost -U postgres -c "CREATE DATABASE users_service_test_db;"
        
        psql -h localhost -U postgres -c "CREATE USER auth_test_user WITH PASSWORD 'test_password';"
        psql -h localhost -U postgres -c "CREATE USER tenant_test_user WITH PASSWORD 'test_password';"
        psql -h localhost -U postgres -c "CREATE USER users_test_user WITH PASSWORD 'test_password';"
        
        psql -h localhost -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE auth_service_test_db TO auth_test_user;"
        psql -h localhost -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE tenant_service_test_db TO tenant_test_user;"
        psql -h localhost -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE users_service_test_db TO users_test_user;"
    
    - name: Validate Flyway migrations
      run: |
        echo "üîç Validating Flyway migrations..."
        
        # Auth Service
        echo "Validating auth-service migrations..."
        cd auth-service
        mvn flyway:migrate -Dflyway.url=jdbc:postgresql://localhost:5432/auth_service_test_db -Dflyway.user=auth_test_user -Dflyway.password=test_password -q
        mvn flyway:validate -Dflyway.url=jdbc:postgresql://localhost:5432/auth_service_test_db -Dflyway.user=auth_test_user -Dflyway.password=test_password -q
        cd ..
        
        # Tenant Service
        echo "Validating tenant-service migrations..."
        cd tenant-service
        mvn flyway:migrate -Dflyway.url=jdbc:postgresql://localhost:5432/tenant_service_test_db -Dflyway.user=tenant_test_user -Dflyway.password=test_password -q
        mvn flyway:validate -Dflyway.url=jdbc:postgresql://localhost:5432/tenant_service_test_db -Dflyway.user=tenant_test_user -Dflyway.password=test_password -q
        cd ..
        
        # Users Service
        echo "Validating users-service migrations..."
        cd users-service
        mvn flyway:migrate -Dflyway.url=jdbc:postgresql://localhost:5432/users_service_test_db -Dflyway.user=users_test_user -Dflyway.password=test_password -q
        mvn flyway:validate -Dflyway.url=jdbc:postgresql://localhost:5432/users_service_test_db -Dflyway.user=users_test_user -Dflyway.password=test_password -q
        cd ..
        
        echo "‚úÖ All migrations validated successfully!"

  # Build and test services
  build-and-test:
    name: Build and Test Services
    runs-on: ubuntu-latest
    needs: [code-quality, validate-migrations]
    
    strategy:
      matrix:
        service: [service-registry, auth-service, users-service, tenant-service, api-gateway]
        java-version: [21]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: 'maven'
    
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Compile ${{ matrix.service }}
      working-directory: ${{ matrix.service }}
      run: |
        echo "üî® Compiling ${{ matrix.service }}..."
        mvn clean compile -q
    
    - name: Run tests for ${{ matrix.service }}
      working-directory: ${{ matrix.service }}
      run: |
        echo "üß™ Running tests for ${{ matrix.service }}..."
        mvn test -q
    
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests - ${{ matrix.service }}
        path: ${{ matrix.service }}/target/surefire-reports/*.xml
        reporter: java-junit
    
    - name: Build ${{ matrix.service }} JAR
      working-directory: ${{ matrix.service }}
      run: |
        echo "üì¶ Building JAR for ${{ matrix.service }}..."
        mvn package -DskipTests -q
        
        # Verify JAR was created
        JAR_FILE=$(find target -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -1)
        if [ -n "$JAR_FILE" ]; then
          echo "‚úÖ JAR file created: $JAR_FILE"
          JAR_SIZE=$(stat -c%s "$JAR_FILE")
          echo "üìä JAR size: $(numfmt --to=iec $JAR_SIZE)"
          echo "JAR_SIZE=$JAR_SIZE" >> $GITHUB_ENV
        else
          echo "‚ùå No JAR file found!"
          exit 1
        fi
    
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.service }}-jar
        path: ${{ matrix.service }}/target/*.jar
        retention-days: 7
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ matrix.service }}-test-results
        path: ${{ matrix.service }}/target/surefire-reports/
        retention-days: 7

  # Build Docker images
  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-jars
    strategy:
      matrix:
        service: [service-registry, auth-service, users-service, tenant-service, api-gateway]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download JAR artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.service }}-jar
        path: ${{ matrix.service }}/target/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: ${{ env.PUSH_IMAGES == 'true' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=${{ env.IMAGE_TAG }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        push: ${{ env.PUSH_IMAGES == 'true' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Build local Docker image (no push)
      if: ${{ env.PUSH_IMAGES == 'false' }}
      run: |
        cd ${{ matrix.service }}
        docker build -t ${{ matrix.service }}:${{ env.IMAGE_TAG }} .
        echo "Local Docker image built: ${{ matrix.service }}:${{ env.IMAGE_TAG }}"

  # Security scan for Docker images
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-docker-images
    if: ${{ env.PUSH_IMAGES == 'true' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ env.IMAGE_TAG }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to staging (optional)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker-images, security-scan]
    if: ${{ env.PUSH_IMAGES == 'true' && github.ref == 'refs/heads/develop' }}
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: kubectl apply, docker-compose up, etc.
        echo "Staging deployment completed"

  # Deploy to production (only on tags)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker-images, security-scan]
    if: ${{ env.PUSH_IMAGES == 'true' && startsWith(github.ref, 'refs/tags/v') }}
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: kubectl apply, docker-compose up, etc.
        echo "Production deployment completed"

  # Summary and notifications
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-jars, build-docker-images]
    if: always()
    
    steps:
    - name: Build Summary
      run: |
        echo "## üöÄ CRM Microservices Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build Status:**" >> $GITHUB_STEP_SUMMARY
        echo "- JAR Builds: ${{ needs.build-jars.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Builds: ${{ needs.build-docker-images.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Services Built:**" >> $GITHUB_STEP_SUMMARY
        echo "- Service Registry" >> $GITHUB_STEP_SUMMARY
        echo "- Auth Service" >> $GITHUB_STEP_SUMMARY
        echo "- Users Service" >> $GITHUB_STEP_SUMMARY
        echo "- Tenant Service" >> $GITHUB_STEP_SUMMARY
        echo "- API Gateway" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image Tag:** ${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ env.PUSH_IMAGES }}" = "true" ]; then
          echo "**Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch/Tag:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
