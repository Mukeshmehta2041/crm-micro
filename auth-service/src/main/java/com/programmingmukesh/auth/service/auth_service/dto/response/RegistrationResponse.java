package com.programmingmukesh.auth.service.auth_service.dto.response;

import java.time.LocalDateTime;
import java.util.UUID;

import lombok.*;

/**
 * Registration Response DTO for user registration response.
 * 
 * <p>
 * This DTO represents the response data returned after successful user
 * registration.
 * It includes both user profile and authentication credential information.
 * </p>
 * 
 * <p>
 * <strong>Response Structure:</strong>
 * </p>
 * <ul>
 * <li>User identification (userId, username, email)</li>
 * <li>User profile information (firstName, lastName, displayName)</li>
 * <li>Security status (emailVerified, mfaEnabled)</li>
 * <li>Timestamps (createdAt, updatedAt)</li>
 * <li>Response metadata (message, status)</li>
 * </ul>
 * 
 * @author Programming Mukesh
 * @version 1.0
 * @since 2024
 */
@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class RegistrationResponse {

  /**
   * Unique identifier for the user.
   * Generated by the users service during profile creation.
   */
  private UUID userId;

  /**
   * User's username for authentication.
   * Must be unique across the system.
   */
  private String username;

  /**
   * User's email address.
   * Used for login and notifications.
   */
  private String email;

  /**
   * User's first name.
   * Part of the user profile information.
   */
  private String firstName;

  /**
   * User's last name.
   * Part of the user profile information.
   */
  private String lastName;

  /**
   * User's display name for public profiles.
   * Optional field for user interface display.
   */
  private String displayName;

  /**
   * Flag indicating whether the user's email has been verified.
   * Defaults to false for new registrations.
   */
  private Boolean emailVerified;

  /**
   * Flag indicating whether multi-factor authentication is enabled.
   * Defaults to false for new registrations.
   */
  private Boolean mfaEnabled;

  /**
   * The type of multi-factor authentication method being used.
   * Null if MFA is not enabled.
   */
  private String mfaMethod;

  /**
   * Timestamp when the user was created.
   * Set during the registration process.
   */
  private LocalDateTime createdAt;

  /**
   * Timestamp when the user was last updated.
   * Initially set to the same as createdAt.
   */
  private LocalDateTime updatedAt;

  /**
   * Success message for the registration.
   * Provides user-friendly feedback.
   */
  private String message;

  /**
   * Registration status.
   * Indicates the success or failure of the registration.
   */
  private String status;

  /**
   * Additional metadata about the registration process.
   * Can include warnings, notes, or additional information.
   */
  private String metadata;

  /**
   * Checks if the registration was successful.
   * 
   * @return true if the registration was successful, false otherwise
   */
  public boolean isSuccessful() {
    return "SUCCESS".equalsIgnoreCase(status) && userId != null;
  }

  /**
   * Gets the user's full name.
   * 
   * @return the full name of the user, or null if not available
   */
  public String getFullName() {
    if (firstName == null && lastName == null) {
      return null;
    }
    if (firstName == null) {
      return lastName;
    }
    if (lastName == null) {
      return firstName;
    }
    return firstName + " " + lastName;
  }

  /**
   * Checks if the user has completed the minimum required setup.
   * 
   * @return true if the user has basic information set up
   */
  public boolean hasMinimumSetup() {
    return userId != null &&
        username != null && !username.trim().isEmpty() &&
        email != null && !email.trim().isEmpty();
  }

  /**
   * Gets a summary of the registration result.
   * 
   * @return a summary string describing the registration status
   */
  public String getRegistrationSummary() {
    if (isSuccessful()) {
      return String.format("User '%s' registered successfully with ID: %s",
          username, userId);
    } else {
      return String.format("Registration failed with status: %s", status);
    }
  }
}